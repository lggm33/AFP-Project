"""
Django settings for afp_backend project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-fp3v_n&0zs)!a)sr+5&e=$g(%9ctce=w-twtcbpo178n!)1_ra')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth
    
    # Django REST Framework
    'rest_framework',
    'rest_framework.authtoken',
    
    # CORS headers
    'corsheaders',
    
    # Django Allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.microsoft',
    # 'allauth.socialaccount.providers.yahoo',  # Coming soon
    
    # REST Auth
    'dj_rest_auth',
    'dj_rest_auth.registration',
    
    # JWT Token Blacklist
    'rest_framework_simplejwt.token_blacklist',
    
    # Celery apps
    'django_celery_beat',
    'django_celery_results',
    
    # Local apps
    'users',
    'banking',
    'transactions',
    'analytics',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Required for allauth
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'afp_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'afp_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='afp_db'),
        'USER': config('DB_USER', default='afp_user'),
        'PASSWORD': config('DB_PASSWORD', default='afp_password'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

# Use DATABASE_URL if provided (Railway/Heroku style)
DATABASE_URL = config('DATABASE_URL', default=None)
if DATABASE_URL:
    import dj_database_url
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React development server
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Keep security
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Email configuration (for future use)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Development
EMAIL_HOST = config('EMAIL_HOST', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

# =====================================================
# REDIS & CELERY CONFIGURATION (EMAIL PROCESSING)
# =====================================================

# Redis URL configuration - unified for all Redis uses
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')

# Celery Broker settings
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Task routing for different types of workers
CELERY_TASK_ROUTES = {
    'workers.email_processing.import_emails_task': {'queue': 'email_import'},
    'workers.email_processing.process_email_task': {'queue': 'email_processing'},
    'workers.email_processing.create_transaction_task': {'queue': 'transaction_creation'},
    'workers.ai_generation.generate_patterns_task': {'queue': 'ai_processing'},
}

# Worker configuration
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Task retry configuration
CELERY_TASK_RETRY_DELAY = 60  # seconds
CELERY_TASK_MAX_RETRIES = 3

# Scheduled tasks (Celery Beat)
CELERY_BEAT_SCHEDULE = {
    'import-emails-every-5-minutes': {
        'task': 'workers.email_processing.import_emails_task',
        'schedule': 300.0,  # 5 minutes
        'options': {'queue': 'email_import'}
    },
    'process-queued-emails-every-minute': {
        'task': 'workers.email_processing.process_queued_emails_task',
        'schedule': 60.0,  # 1 minute
        'options': {'queue': 'email_processing'}
    },
}

# =====================================================
# REDIS CACHE CONFIGURATION
# =====================================================

# Django cache configuration using Redis
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 50,
                'retry_on_timeout': True,
            },
        },
        'KEY_PREFIX': 'afp',
        'TIMEOUT': 3600,  # 1 hour default
    }
}

# Session backend using Redis cache
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours

# OpenAI API configuration (for future use)
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# =====================================================
# DJANGO ALLAUTH CONFIGURATION (MULTI-PROVIDER)
# =====================================================

SITE_ID = 1

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings (updated to new format)
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Disable for development
ACCOUNT_LOGIN_ON_GET = True

# Custom adapters for handling OAuth flow
ACCOUNT_ADAPTER = 'users.adapters.CustomAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'

# New django-allauth configuration format
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']

# Social account settings
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = False  # Don't auto-signup, connect to existing users
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_STORE_TOKENS = True  # ‚≠ê CRITICAL: Store OAuth tokens in database
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True

# üîê SECURITY: OAuth Token Storage Security
# WARNING: Storing OAuth tokens has security implications
# - Tokens are encrypted at rest using Fernet encryption
# - Access is logged and audited
# - Tokens expire and are rotated regularly
# - Only enable if you ABSOLUTELY need access to external APIs
OAUTH_TOKEN_ENCRYPTION_KEY = config('OAUTH_TOKEN_ENCRYPTION_KEY', default='')

# Token expiration and rotation settings
OAUTH_TOKEN_MAX_AGE = 3600  # 1 hour before forced refresh
OAUTH_TOKEN_AUDIT_LOG = True  # Log all token access

# Multi-provider configuration (using database SocialApp objects)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            'https://www.googleapis.com/auth/gmail.readonly',
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
            'prompt': 'consent',
        },
        'OAUTH_PKCE_ENABLED': True,
        # APP credentials are handled by SocialApp objects in the database
    },
    'microsoft': {
        'SCOPE': [
            'openid',
            'email',
            'profile',
            'https://graph.microsoft.com/user.read',
            'https://graph.microsoft.com/mail.read',
        ],
        'AUTH_PARAMS': {
            'prompt': 'consent',
        },
        # APP credentials are handled by SocialApp objects in the database
    },
    # Yahoo coming soon
    # 'yahoo': {
    #     'SCOPE': [
    #         'openid',
    #         'profile',
    #         'email',
    #     ],
    #     # APP credentials are handled by SocialApp objects in the database
    # },
}

# REST Auth settings
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'afp-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'afp-refresh-token',
    'JWT_AUTH_HTTPONLY': False,  # Allow frontend access to tokens
    'JWT_AUTH_SAMESITE': 'Lax',  # Allow cross-origin cookies
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
}

# Session settings for cross-origin
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS

# JWT settings (you'll need to install djangorestframework-simplejwt)
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# Redirect URLs after social auth
LOGIN_REDIRECT_URL = config('LOGIN_REDIRECT_URL', default='http://127.0.0.1:8000/auth/success/')
LOGOUT_REDIRECT_URL = config('LOGOUT_REDIRECT_URL', default='http://localhost:3000/')

# OAuth credentials from environment variables
GOOGLE_CLIENT_ID = config('GOOGLE_CLIENT_ID', default='')
GOOGLE_CLIENT_SECRET = config('GOOGLE_CLIENT_SECRET', default='')
MICROSOFT_CLIENT_ID = config('MICROSOFT_CLIENT_ID', default='')
MICROSOFT_CLIENT_SECRET = config('MICROSOFT_CLIENT_SECRET', default='')
# YAHOO_CLIENT_ID = config('YAHOO_CLIENT_ID', default='')
# YAHOO_CLIENT_SECRET = config('YAHOO_CLIENT_SECRET', default='')
